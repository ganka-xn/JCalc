package GUI;import GUI.Panels.*;import com.formdev.flatlaf.FlatDarkLaf;import com.formdev.flatlaf.FlatLightLaf;import net.miginfocom.swing.*;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.InputEvent;import java.awt.event.KeyEvent;import static GUI.JCalcVars.*;public class JCalc extends JPanel {    public static IOPanel ioPane;    private JSeparator separator1, separator2, separator3, separator4;    private MemPanel memPane;    private FuncPanel funcPane;    private NumPanel numPane;    public static HistoryPanel historyPane;    public static void main(String[] args) {        SwingUtilities.invokeLater(new Runnable() {            @Override            public void run() {                try {                    UIManager.setLookAndFeel(new FlatDarkLaf());                } catch( Exception ex ) {                    System.err.println( "Failed to initialize LaF" );                }                JFrame frame = new JFrame("JCalc");                frame.setContentPane(new JCalc());                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                frame.pack();                frame.setResizable(false);                frame.setVisible(true);                frame.setFocusable(true);            }        });    }    // Constructor    private JCalc() {        initComponents();    }    private void initComponents() {        //======== this ========        setSize(new Dimension(frameWidth, 420));        setMaximumSize(new Dimension(frameWidth, 420));        setLayout(new MigLayout(                "insets 0 0 0 0,hidemode 3,gap 0 0",                // columns                "[fill]",                // rows                "[fill]" +                        "[fill]" +                        "[fill]" +                        "[fill]" +                        "[fill]" +                        "[fill]"));        ioPane = new IOPanel();        add(ioPane, "cell 0 0");        separator1 = new JSeparator();        separator1.setForeground(Color.gray);        add(separator1, "cell 0 1");        memPane = new MemPanel();        add(memPane, "cell 0 2");        separator2 = new JSeparator();        separator2.setForeground(Color.gray);        add(separator2, "cell 0 3");        //---- functional keys Pane ----        funcPane = new FuncPanel();        add(funcPane, "cell 0 4");        separator3 = new JSeparator();        separator3.setForeground(Color.gray);        add(separator3, "cell 0 5");        //---- numbers Pane ----        numPane = new NumPanel();        add(numPane, "cell 0 6");        separator4 = new JSeparator();        separator4.setForeground(Color.gray);        add(separator4, "cell 0 7");        //---- history Pane ----        historyPane = new HistoryPanel();        add(historyPane, "cell 0 8");        initKeyInput();    }    private void initKeyInput() {        InputMap inputMap = this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);        KeyStroke keyStroke0 = KeyStroke.getKeyStroke(KeyEvent.VK_0, 0, false);        inputMap.put(keyStroke0, "0");        this.getActionMap().put("0", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnZero.doClick();            }        });        KeyStroke keyStroke1 = KeyStroke.getKeyStroke(KeyEvent.VK_1, 0, false);        inputMap.put(keyStroke1, "1");        this.getActionMap().put("1", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnOne.doClick();            }        });        KeyStroke keyStroke2 = KeyStroke.getKeyStroke(KeyEvent.VK_2, 0, false);        inputMap.put(keyStroke2, "2");        this.getActionMap().put("2", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnTwo.doClick();            }        });        KeyStroke keyStroke3 = KeyStroke.getKeyStroke(KeyEvent.VK_3, 0, false);        inputMap.put(keyStroke3, "3");        this.getActionMap().put("3", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnThree.doClick();            }        });        KeyStroke keyStroke4 = KeyStroke.getKeyStroke(KeyEvent.VK_4, 0, false);        inputMap.put(keyStroke4, "4");        this.getActionMap().put("4", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnFour.doClick();            }        });        KeyStroke keyStroke5 = KeyStroke.getKeyStroke(KeyEvent.VK_5, 0, false);        inputMap.put(keyStroke5, "5");        this.getActionMap().put("5", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnFive.doClick();            }        });        KeyStroke keyStroke6 = KeyStroke.getKeyStroke(KeyEvent.VK_6, 0, false);        inputMap.put(keyStroke6, "6");        this.getActionMap().put("6", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnSix.doClick();            }        });        KeyStroke keyStroke7 = KeyStroke.getKeyStroke(KeyEvent.VK_7, 0, false);        inputMap.put(keyStroke7, "7");        this.getActionMap().put("7", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnSeven.doClick();            }        });        KeyStroke keyStroke8 = KeyStroke.getKeyStroke(KeyEvent.VK_8, 0, false);        inputMap.put(keyStroke8, "8");        this.getActionMap().put("8", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnEight.doClick();            }        });        KeyStroke keyStroke9 = KeyStroke.getKeyStroke(KeyEvent.VK_9, 0, false);        inputMap.put(keyStroke9, "9");        this.getActionMap().put("9", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnNine.doClick();            }        });        KeyStroke keyStrokePeriod = KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, 0, false); //Point == period        inputMap.put(keyStrokePeriod, ".");        this.getActionMap().put(".", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnPoint.doClick();            }        });        KeyStroke keyStrokePlus = KeyStroke.getKeyStroke(KeyEvent.VK_PLUS, 0, false);        inputMap.put(keyStrokePlus, "+");        this.getActionMap().put("+", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnPlus.doClick();            }        });        KeyStroke keyStrokeMinus = KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, 0, false);        inputMap.put(keyStrokeMinus, "-");        this.getActionMap().put("-", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnMinus.doClick();            }        });        KeyStroke keyStrokeMultiply = KeyStroke.getKeyStroke(KeyEvent.VK_MULTIPLY, 0, false);        inputMap.put(keyStrokeMultiply, "*");        this.getActionMap().put("*", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnMultiply.doClick();            }        });        KeyStroke keyStrokeDivide = KeyStroke.getKeyStroke(KeyEvent.VK_DIVIDE, 0, false);        inputMap.put(keyStrokeDivide, "/");        this.getActionMap().put("/", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnDivide.doClick();            }        });        KeyStroke keyStrokeEquals = KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, 0, false);        inputMap.put(keyStrokeEquals, "=");        this.getActionMap().put("=", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnEquals.doClick();            }        });        KeyStroke keyStrokeEqualsAlt = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, false);        inputMap.put(keyStrokeEqualsAlt, "=");        this.getActionMap().put("=", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnEquals.doClick();            }        });        KeyStroke keyStrokeDel = KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE, 0, false);        inputMap.put(keyStrokeDel, "del");        this.getActionMap().put("del", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnDel.doClick();            }        });        KeyStroke keyStrokeAC = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);        inputMap.put(keyStrokeAC, "C");        this.getActionMap().put("C", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                numPane.btnAC.doClick();            }        });        KeyStroke keyStrokeOpenParenthesis = KeyStroke.getKeyStroke(KeyEvent.VK_LEFT_PARENTHESIS, InputEvent.SHIFT_DOWN_MASK, false);        inputMap.put(keyStrokeOpenParenthesis, "(");        this.getActionMap().put("(", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                funcPane.btnOpenBracket.doClick();            }        });        KeyStroke keyStrokeCloseParenthesis = KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT_PARENTHESIS, InputEvent.SHIFT_DOWN_MASK, false);        inputMap.put(keyStrokeCloseParenthesis, ")");        this.getActionMap().put(")", new AbstractAction(){            @Override            public void actionPerformed(ActionEvent evt){                funcPane.btnCloseBracket.doClick();            }        });    }}